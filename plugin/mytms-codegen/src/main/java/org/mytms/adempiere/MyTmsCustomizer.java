package org.mytms.adempiere;

import org.apache.openjpa.enhance.ApplicationIdTool;
import org.apache.openjpa.jdbc.meta.ClassMapping;
import org.apache.openjpa.jdbc.meta.FieldMapping;
import org.apache.openjpa.jdbc.meta.ReverseCustomizer;
import org.apache.openjpa.jdbc.meta.ReverseMappingTool;
import org.apache.openjpa.jdbc.schema.Column;
import org.apache.openjpa.jdbc.schema.ForeignKey;
import org.apache.openjpa.jdbc.schema.Table;
import org.apache.openjpa.lib.util.CodeFormat;

import java.util.Iterator;
import java.util.List;
import java.util.Properties;

/**
 * Created by admin on 2017/5/6.
 */
public class MyTmsCustomizer implements ReverseCustomizer {
    private ReverseMappingTool tool;

    @Override
    public void setConfiguration(Properties props) {
        System.out.println(props);
    }

    @Override
    public void setTool(ReverseMappingTool tool) {
        this.tool = tool;
    }

    @Override
    public int getTableType(Table table, int defaultType) {
        return defaultType;
    }

    @Override
    public String getClassName(Table table, String defaultName) {
        if (defaultName.startsWith("Crm")) {
            return defaultName.substring(3);
        }
        return defaultName;
    }

    @Override
    public void customize(ClassMapping cls) {

    }

//    void writeAntDSchema(ClassMapping mapping) {
//        ADForm form = AntDUtils.toForm(mapping);
//        String name = mapping.toString();
//        String fileName = name.substring(0, 1).toLowerCase() + name.substring(1);
//        int quoteFieldNames = SerializerFeature.config(JSON.DEFAULT_GENERATE_FEATURE, SerializerFeature.QuoteFieldNames, false);
//        try (FileWriter writer = new FileWriter("d:/mytms_home/schema/" + fileName + ".schema.js")) {
//            writer.append("import { Formatter, Parser } from '../utils/columnRender';").append("\r\n");
//            writer.append("import OptionConstants from '../utils/optionConstants';").append("\r\n").append("\r\n");
//            writer.append("module.exports = ");
//            SerializeConfig config = new SerializeConfig();
//            config.put(ADComponent.class, new ComponentCodec());
//            String json = JSON.toJSONString(form, config, null, null, quoteFieldNames, SerializerFeature.UseSingleQuotes, SerializerFeature.PrettyFormat);
//            writer.append(json);
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//    }

    String writeEntity(ClassMapping mapping) {
        CodeFormat code = new CodeFormat();
        code.append("${packageDec}").afterSection();
        code.append("${imports}").endl().append("import org.mytms.common.domain.OrgAssignedEntity;").endl()
                .append("import lombok.*;").afterSection();

        code.append("/**").endl().append(" * Auto-generated by: ").append("OpenJPA ReverseMappingTool").endl().append(" */").endl();

        writeAnnotations(code, tool.getAnnotationsForMeta(mapping), 0);
        code.append("public class ").append("${className}");
        code.extendsDec(1).append(" ").append("OrgAssignedEntity<Long, ").append("${className}>");
        code.openBrace(1).endl();
        code.tab().append("private static final long serialVersionUID = 1L;").afterSection();
        code.append("${fieldDecs}");

        closeClassBrace(code, null);

        return code.toString();
    }

    @Override
    public String getClassCode(ClassMapping mapping) {
//        return writeDto(mapping);
        return writeEntity(mapping);
    }

    @SuppressWarnings("rawtypes")
    private void writeAnnotations(CodeFormat code, List ann, int tabLevel) {
        if (ann == null || ann.size() == 0) return;
        code.append("@Getter").endl();
        code.append("@Setter").endl();
        code.append("@NoArgsConstructor").endl();
        for (Iterator i = ann.iterator(); i.hasNext(); ) {
            if (tabLevel > 0) code.tab(tabLevel);
            String s = (String) i.next();
            code.append(s).endl();
        }
    }

    protected void closeClassBrace(CodeFormat code, ApplicationIdTool _appid) {
        if (_appid != null) {
            code.afterSection();
            code.append(_appid.getCode());
            code.endl();
        }
        code.closeBrace(1);
    }

    @Override
    public String getFieldName(ClassMapping dec, Column[] cols, ForeignKey fk, String defaultName) {
        String fieldName = defaultName.toLowerCase();
        switch (fieldName) {
            case "creator":
            case "modifier":
            case "modifytime":
            case "createtime":
            case "recstatus":
            case "recver":
            case "createname":
            case "modifyname":
            case "orgid":
            case "systemid":
            case "created":
            case "modified":
                return null;
        }
        return defaultName;
    }

    @Override
    public void customize(FieldMapping field) {
    }

    @Override
    public String getInitialValue(FieldMapping field) {
        return null;
    }

    @Override
    public String getDeclaration(FieldMapping field) {
        return null;
    }


    @Override
    public String getFieldCode(FieldMapping field) {
        return null;
    }

    @Override
    public boolean unmappedTable(Table table) {
        return false;
    }

    @Override
    public void close() {

    }
}
